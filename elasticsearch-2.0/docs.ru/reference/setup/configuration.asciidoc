[[setup-configuration]]
== Конфигурация

[float]
=== Переменные окружения

Внутри скриптов, Elasticsearch работает с значениями в переменной `JAVA_OPTS`,
которая передаётся в запускаемую JVM (Виртуальную машину Java). Наиболее важными
настройками являются: `-Xmx` для управления максимальным объёмом памяти,
выделяемой для процесса и `-Xms` для управления минимальным объёмом памяти,
выделяемой для процесса (_обычно, чем больше памяти выделяется процессу elasticsearch,
тем лучше_).

Намного более лучшим решением, является оставить значение `JAVA_OPTS` без изменений
и использовать для установки/изменения настроек JVM переменную окружения `ES_JAVA_OPTS`
или аргументы командной строки.

Переменная окружения `ES_HEAP_SIZE` позволяет установить размер кучи (объём
памяти, которая используется для динамического выделения памяти внутри
программы – прим.пер.), который выделяется для Java-процесса elasticsearch.
Для максимального и минимального значения будет выделяться одно и то же значение,
хотя можно их указать явно (не рекомендуется), установив переменные окружения
`ES_MIN_MEM` (по умолчанию `256m`) и `ES_MAX_MEM` (по умолчанию `1gb`).

Рекомендуется установить минимальный и максимальный объём памяти в одно и то же
значение и включить <<setup-configuration-memory,`mlockall`>>.

[float]
[[system]]
=== Конфигурация системы

[float]
[[file-descriptors]]
==== Файловые дескрипторы

Убедитесь, что вы увеличили количество открытых файловых дескрипторов на данной
машине (или для пользователя, от которого запускается elasticsearch). Рекомендуется
установить 32K или даже 64K.

Для тестирование как много файлов может открыть процесс, запустите его с опцией
`-Des.max-open-files` установленной в `true`. При запуске вам будет выведено
количество файлов, которое может открыть процесс.

В качестве альтернативы, вы можете получить `max_file_descriptors` для каждого узла,
с помощью вызова <<cluster-nodes-info>> API, командой:

[source,js]
--------------------------------------------------
curl localhost:9200/_nodes/process?pretty
--------------------------------------------------

[float]
[[vm-max-map-count]]
==== Виртуальная память

Elasticsearch по умолчанию использует для хранения своих индексов
каталог <<default_fs,`hybrid mmapfs / niofs`>>. По умолчанию, в операционной системе
ограничения на счётчики mmap слишком низкие, что может в результате привести к
исключениям, вызванным нехваткой памяти. В Linux вы можете увеличить эти ограничения,
запустив от пользователя `root` команду:

[source,sh]
-------------------------------------
sysctl -w vm.max_map_count=262144
-------------------------------------

Чтобы установить это значение навсегда, обновите настройку `vm.max_map_count` в
файле `/etc/sysctl.conf`.

NOTE: Если вы установили Elasticsearch с помощью пакета (.deb, .rpm), то данная
настройка будет изменена автоматически. Чтобы проверить это, запустите
`sysctl vm.max_map_count`.

[float]
[[setup-configuration-memory]]
==== Настройки памяти

Большинство операционных систем пытается использовать так много памяти как это
только возможно для кэширования файловой системы и выгружает в область своппинга
неиспользуемую память приложений, что может в результате привести к своппингу
процесса elasticsearch. Своппинг - это очень плохо для производительности и
стабильности узла, так что мы должны избегать его во всех случаях.

Существует три возможности:

* **Выключить своппинг**
+
--

Простейшее решение, которое полностью выключает своппинг. Обычно Elasticsearch
является единственной службой, работающей на компьютере и использование им памяти
управляется переменной окружения `ES_HEAP_SIZE`. Таким образом, на этом компьютере
нет нелбходимости включать своппинг.

В Linux, вы можете временно выключить своппинг запустив: `sudo swappoff -a`. Чтобы
выключить его навсегда, вам нужно отредактировать файл `/etc/fstab` и заккоментировать
строки, которые содержат слово swap.

На Windows, эквивалентное решение может быть достигнуто выключением файла подкачки
через `System Properties → Advanced → Performance → Advanced → Virtual memory`.

--

* **Настроить `swappiness`**
+
--
Вторым решением, является установка с помощью sysctl параметра `vm.swappiness` в `0`.
Это снизит тенденцию ядра к осуществлению своппинга и не должно привести к
своппингу в нормальных условиях, хотя и оставляет возможность операционной
системе применять своппинг при наступлении аварийных условий.

NOTE: Начиная с ядра версии 3.5-rc1 и выше, установка `swappiness` в `0` будет
заставлять OOM killer убивать процесс, вместо того, чтобы разрешить ему своппинг.
Вам нужно установить `swappiness` в `1`, чтобы разрешить своппинг в аварийных
ситуациях.
--

* **`mlockall`**
+
--
Третье решение состоит в том чтобы использовать на Linux/Unix системах
http://opengroup.org/onlinepubs/007908799/xsh/mlockall.html[mlockall] или
использовать на Windows
https://msdn.microsoft.com/en-us/library/windows/desktop/aa366895%28v=vs.85%29.aspx[VirtualLock],
чтобы попытаться заблокировать адресное пространство процесса в памяти, предотвращая
своппинг любой памяти Elasticsearch. Это может быть выполнено с помощью добавления
в файл `config/elasticsearch.yml` строки: 

[source,yaml]
--------------
bootstrap.mlockall: true
--------------

После запуска Elasticsearch, вы можете увидеть была ли эта настройка успешно
применена, проверив значение mlockall при выводе вот такого запроса:

[source,sh]
--------------
curl http://localhost:9200/_nodes/process?pretty
--------------

Если вы увидели, что `mlockall` имеет значение `false`, то это означает, что запрос
`mlockall` завершился неудачно. Возможная причина этого в том на Linux/Unix системах,
что пользователь, запустивший Elasticsearch не имеет прав на блокировку памяти.
Такие права могут быть предоставлены запуском `ulimit -l unlimited` от пользователя
`root` перед запуском Elasticsearch.

Другая возможная причина почему `mlockall` может завершиться неудачно, состоит в
том, что временный каталог (обычно `/tmp`) смонтирован с опцией `noexec`. Это можно
решить, создав новый временный каталог и запустив Elasticsearch с: 

[source,sh]
--------------
./bin/elasticsearch -Djna.tmpdir=/path/to/new/dir
--------------

WARNING: `mlockall` может заставить JVM или сессию shell завершиться, если они
попытаются выделить себе памяти больше, чем доступно!
--

[float]
[[settings]]
=== Настройки Elasticsearch

Конфигурационные файлы *elasticsearch* можно найти в каталоге `ES_HOME/config`.
Данный каталог содержит два файла, `elasticsearch.yml` для конфигурирования разных
<<modules,модулей>>, Elasticsearch и `logging.yml` для конфигурирования логгирования
в Elasticsearch.

Это файлы в конфигурационном формате http://www.yaml.org/[YAML]. 
Вот пример изменения адреса: все модули, использующие работу с сетью будут
привязаны и работать со следующим адресом:

[source,yaml]
--------------------------------------------------
network :
    host : 10.0.0.4
--------------------------------------------------


[float]
[[paths]]
==== Пути

При продуктивном использовании, вы почти навреняка захотите изменить пути к файлам
данным и лог-файлам:

[source,yaml]
--------------------------------------------------
path:
  logs: /var/log/elasticsearch
  data: /var/data/elasticsearch
--------------------------------------------------

[float]
[[cluster-name]]
==== Имя кластера

Также не забудьте дать вашему продуктивному кластеру имя, которое используется
для обнаружения и автоматического присоединения других узлов:

[source,yaml]
--------------------------------------------------
cluster:
  name: <ИМЯ ВАШЕГО КЛАСТЕРА>
--------------------------------------------------

Убедитесь, что вы не используете одинаковые имена кластеров в разных
окружениях, в противном случае вы можете в конце концов подключить узлы
к неверному кластеру. Например, вы можете использовать 
`logging-dev`, `logging-stage` и `logging-prod` соответственно для
кластеров разработки, постановки и продуктива.

[float]
[[node-name]]
==== Имя узла

Вы можете также для каждого узла захотеть изменить имя узла по умолчанию
на что-либо похожее на имя компьютера. По умолчанию, при старте Elasticsearch
будет случайным образом выбирать имя персонажа Marvel из списка, имеющего
около 3000 имён.

[source,yaml]
--------------------------------------------------
node:
  name: <ИМЯ ВАШЕГО УЗЛА>
--------------------------------------------------

Имя машины предоставляется переменной окружения `HOSTNAME`.
Если ваша машина запущена как одиночный узел elasticsearch для
этого кластера, вы можете установить имя узла таким же как
и имя машины, используя нотацию `${...}`.

[source,yaml]
--------------------------------------------------
node:
  name: ${HOSTNAME}
--------------------------------------------------

Внутри все настройки группируются в "пространство имён". Например,
данные выше настройки группируются в `node.name`. Это означает, что
можно легко поддерживать другие конфигурационные форматы, такие как,
например, http://www.json.org[JSON]. Если JSON является предпочтительным
конфигурационным форматом, просто переименуйте файл `elasticsearch.yml`
в `elasticsearch.json` и добавьте:

[float]
[[styles]]
==== Стили конфигурации

[source,yaml]
--------------------------------------------------
{
    "network" : {
        "host" : "10.0.0.4"
    }
}
--------------------------------------------------

Всё вышеописанное также означает, что можно легко предоставить настройки
снаружи либо используя переменную окружения `ES_JAVA_OPTS`, либо как
параметры команды `elasticsearch`, например:

[source,sh]
--------------------------------------------------
$ elasticsearch -Des.network.host=10.0.0.4
--------------------------------------------------

Другая возможность состоит в установке префикса `es.default`. вместо
префикса `es.`, что означает что настройка по умолчанию будет использована
только, если значение явно не задано в конфигурационном файле.

Другая возможность состоит в использовании нотации `${...}` внутри
конфигурационного файла, которая будет использовать значение переменных
окружения, например:

[source,js]
--------------------------------------------------
{
    "network" : {
        "host" : "${ES_NET_HOST}"
    }
}
--------------------------------------------------

Дополнительно, для настроек, которые вы не желаете сохранять в конфигурационный
файл, вы можете использовать значение `${prompt.text}` или `${prompt.secret}`
и запускать Elasticsearch как приложение. `${prompt.secret}` выключает
вывод, так что введённое значение не будет показано на вашем терминале;
`${prompt.text}` позволит вам увидеть значение как только вы его введёте.
Например:

[source,yaml]
--------------------------------------------------
node:
  name: ${prompt.text}
--------------------------------------------------

При выполнении команды `elasticsearc`, вам будет выдано приглашение на
ввод актуального значения:

[source,sh]
--------------------------------------------------
Enter value for [node.name]:
--------------------------------------------------

NOTE: Elasticsearch не запустится если `${prompt.text}` или
`${prompt.secret}` используются в настройках и процесс запускается как
служба или в фоновом режиме.

[float]
[[configuration-index-settings]]
=== Настройки индексов

Индексы, создающиеся внутри класетра могут предоставлять свои собственные
настройки. Например, следующая настройка создаёт индекс с хранением в памяти,
а не на файловой системе как по умолчанию (формат может быть либо YAML либо JSON):

[source,sh]
--------------------------------------------------
$ curl -XPUT http://localhost:9200/kimchy/ -d \
'
index:
    refresh_interval: 5s
'
--------------------------------------------------

Настройки уровня индекса могут быть также установлены на уровне узла,
например, внутри файла `elasticsearch.yml` можно написать:

[source,yaml]
--------------------------------------------------
index :
    refresh_interval: 5s
--------------------------------------------------

Это означает, что каждый индекс, который создаётся на указанном узле,
запущенном с вышеозначенной конфигурацией, будет сохраняться в памяти,
*если явно не задано другое*. Другими словами, любые настройки уровня
индекса перекрывают настройки, сделанные в конфигурации узла. Разумеется,
вышеуказанное можно сделать в стиле пространства имён, например:

[source,sh]
--------------------------------------------------
$ elasticsearch -Des.index.refresh_interval=5s
--------------------------------------------------

Все настройки, которые можно сделать на уровне индекса могут быть найдены
вместе с каждым <<index-modules,индексным модулем>>.

[float]
[[logging]]
=== Логгирование

Elasticsearch использует некую внутреннию абстракцию логгирования и
поставляется вместе с http://logging.apache.org/log4j/1.2/[log4j].
Он пытается упростить конфигурирование log4j с помощью использования
http://www.yaml.org/[YAML] для конфигурирования и файла конфигурации
`config/logging.yml`. Также поддерживаются фоматы
http://en.wikipedia.org/wiki/JSON[JSON] и
http://en.wikipedia.org/wiki/.properties[properties].
Можно загрузить несколько конфигурационный файлов, в этом случае они будут
объединены пока они начинаются с приставки `logging.` и заканчиваются одним
из поддерживаемых суффиксов (`.yml`, `.yaml`, `.json` или `.properties`)
Секция logger содержит пакеты java и соответствующие им уровни логгирования,
опуская где это возможно приставку `org.elasticsearch`. Секция appender
содержит место назначения для логов. Обширная информация о том, как настроить
ведение логов и все поддерживаемые appender'ы можно найти в
http://logging.apache.org/log4j/1.2/manual.html[log4j documentation].

Дополнительные Appender'ы и другие классы логгирования, предоставляемые
http://logging.apache.org/log4j/extras/[log4j-extras]
также доступны "из коробки".

[float]
[[deprecation-logging]]
==== Логирование устаревшего

В дополнение к обычному логгированию, Elasticsearch позволяет вам включить
логгирование устаревших действий. Например, это позволяет вам заранее
определить, нужно ли вам смигрировать определённую функциональность в
будущем. По умолчанию, логгирование устаревшей функциональности выключено.
Вы можете включить его в файле `config/logging.yml`, установив уровень
логгирования устаревших возможностей в `DEBUG`.

[source,yaml]
--------------------------------------------------
deprecation: DEBUG, deprecation_log_file
--------------------------------------------------

Эта настройка создаст `deprecation_log_file` в вашем каталоге логгирования,
который будет ежедневно ротироваться. Регулярно просматривайте этот файл,
особенно, если вы планируете обновиться на новую мажорную версию.

